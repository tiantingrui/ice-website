(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{391:function(n,e,a){"use strict";a.r(e);var t=a(22),s=Object(t.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[n._v("#")]),n._v(" webpack")]),n._v(" "),a("ul",[a("li",[n._v("基础必备")]),n._v(" "),a("li",[n._v("高级配置")]),n._v(" "),a("li",[n._v("Webpack 优化")])]),n._v(" "),a("h2",{attrs:{id:"基础必备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础必备"}},[n._v("#")]),n._v(" 基础必备")]),n._v(" "),a("ul",[a("li",[a("p",[a("strong",[n._v("merge 拆分")])]),n._v(" "),a("ul",[a("li",[n._v("分 base 、dev 、prod 三个文件")])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("热更新")])]),n._v(" "),a("ul",[a("li",[n._v("webpack-dev-server")])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("ES6 语法处理")])]),n._v(" "),a("ol",[a("li",[a("p",[n._v("安装 "),a("code",[n._v("npm i babel-loader @babel/core @babel/preset-env -D")])])]),n._v(" "),a("li",[a("p",[n._v("配置文件")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("module: {\n  rules: [\n    {\n                test: /\\.js?$/,\n                exclude: /(node_modules)/,\n                loader: 'babel-loader', // 如果遇到es6 用babel-loader 转化为 es5\n            },\n  ]\n}\n")])])])]),n._v(" "),a("li",[a("p",[a("code",[n._v(".babelrc")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('{\n    "presets": [\n        ["@babel/preset-env"]\n    ],\n    "plugins": []\n}\n')])])])])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("处理样式")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("{\n                test: /\\.css$/,\n                // loader 的执行顺序是：从后往前\n                loader: ['style-loader', 'css-loader', 'postcss-loader'] // 加了 postcss，处理兼容性\n            },\n            {\n                test: /\\.less$/,\n                // 增加 'less-loader' ，注意顺序\n                loader: ['style-loader', 'css-loader', 'less-loader']\n            }\n")])])]),a("p",[n._v("注意：同时配置postcss.config.js")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("module.exports = {\n    plugins: [require('autoprefixer')]\n}\n")])])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("图片处理")])]),n._v(" "),a("ul",[a("li",[a("p",[n._v("dev（正常处理）")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 直接引入图片 url\n            {\n                test: /\\.(png|jpg|jpeg|gif)$/,\n                use: 'file-loader'\n            }\n")])])])]),n._v(" "),a("li",[a("p",[n._v("prod（base 64）")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 图片 - 考虑 base64 编码的情况\n            {\n                test: /\\.(png|jpg|jpeg|gif)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        // 小于 5kb 的图片用 base64 格式产出\n                        // 否则，依然延用 file-loader 的形式，产出 url 格式\n                        limit: 5 * 1024,\n\n                        // 打包到 img 目录下\n                        outputPath: '/img1/',\n\n                        // 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）\n                        // publicPath: 'http://cdn.abc.com'\n                    }\n                }\n            },\n")])])])])])])]),n._v(" "),a("h2",{attrs:{id:"高级配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高级配置"}},[n._v("#")]),n._v(" 高级配置")]),n._v(" "),a("ul",[a("li",[a("p",[a("strong",[n._v("多入口")])]),n._v(" "),a("p",[n._v("base 中 配置入口")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("entry: {\n        index: path.join(srcPath, 'index.js'),\n        other: path.join(srcPath, 'other.js'),\n    },\n      \nplugins: [\n        // 多入口 - 生成 index.html\n        new HtmlWebpackPlugin({\n            template: path.join(srcPath, 'index.html'),\n            filename: 'index.html',\n            // chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用\n            chunks: ['index'] // 只引用 index.js\n        }),\n        // 多入口 - 生成 other.html\n        new HtmlWebpackPlugin({\n            template: path.join(srcPath, 'other.html'),\n            filename: 'other.html',\n            // chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用\n            chunks: ['other'] // 只引用 other.js\n        }),\n    ]\n")])])]),a("p",[n._v("prod 中 配置出口")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("output: {\n        // filename: 'bundle.[contentHash.8].js',\n        filename: '[name].[contentHash.8].js', // name 即多入口时 entry 的 key\n        path: distPath\n    },\n")])])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("抽离压缩 css 文件")])]),n._v(" "),a("ol",[a("li",[n._v("抽离：安装 "),a("code",[n._v("mini-css-extract-plugin")]),n._v("，在 prod 中")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 抽离 css\n            {\n                test: /\\.css$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'postcss-loader'\n                ]\n            },\n            // 抽离 less --\x3e css\n            {\n                test: /\\.less$/,\n                loader: [\n                    MiniCssExtractPlugin.loader,  // 注意，这里不再用 style-loader\n                    'css-loader',\n                    'less-loader',\n                    'postcss-loader'\n                ]\n            }\nplugins: [\n  // 抽离 css 文件\n        new MiniCssExtractPlugin({\n            filename: 'css/main.[contentHash:8].css'\n        })\n]\n")])])]),a("ol",[a("li",[n._v("压缩：")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("optimization: {\n        // 压缩 css\n        minimizer: [new TerserJSPlugin({}), new OptimizeCSSAssetsPlugin({})],\n    }\n")])])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("抽离公共代码和第三方代码")])]),n._v(" "),a("ol",[a("li",[n._v("在 prod 中：")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("optimization: {\n       \n        // 分割代码块\n        splitChunks: {\n            chunks: 'all',\n            /**\n             * initial 入口 chunk，对于异步导入的文件不处理\n                async 异步 chunk，只对异步导入的文件处理\n                all 全部 chunk\n             */\n\n            // 缓存分组\n            cacheGroups: {\n                // 第三方模块\n                vendor: {\n                    name: 'vendor', // chunk 名称\n                    priority: 1, // 权限更高，优先抽离，重要！！！\n                    test: /node_modules/,\n                    minSize: 0,  // 大小限制\n                    minChunks: 1  // 最少复用过几次\n                },\n\n                // 公共的模块\n                common: {\n                    name: 'common', // chunk 名称\n                    priority: 0, // 优先级\n                    minSize: 0,  // 公共模块的大小限制\n                    minChunks: 2  // 公共模块最少复用过几次\n                }\n            }\n        }\n    },\n")])])]),a("ol",[a("li",[n._v("在 base 中，入口文件写明对应的 chunk")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 多入口 - 生成 index.html\n        new HtmlWebpackPlugin({\n            template: path.join(srcPath, 'index.html'),\n            filename: 'index.html',\n            // chunks 表示该页面要引用哪些 chunk （即上面的 index 和 other），默认全部引用\n            chunks: ['index', 'vendor', 'common']  // 要考虑代码分割\n        }),\n        // 多入口 - 生成 other.html\n        new HtmlWebpackPlugin({\n            template: path.join(srcPath, 'other.html'),\n            filename: 'other.html',\n            chunks: ['other', 'common']  // 考虑代码分割\n        })\n")])])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("webpack 如何实现异步加载")]),n._v("（懒加载）")]),n._v(" "),a("p",[n._v("Webpack 不需要配置（支持异步写法，在js中用 import 即可）")]),n._v(" "),a("p",[n._v("引入动态数据 - 懒加载")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("setTimeout(() => {\n  import('./aa,js').then(res => {\n    console.log(res.data)\n  })\n})\n")])])])]),n._v(" "),a("li",[a("p",[a("strong",[n._v("moudle chunk bundle 的区别")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("module - 各个源码文件，webpack 中一切皆模块\nchunk - 多模块合并成的，如 entry import() splitChunk\nbundle - 最终的输出文件\n")])])])])]),n._v(" "),a("h2",{attrs:{id:"webpack-性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-性能优化"}},[n._v("#")]),n._v(" webpack 性能优化")]),n._v(" "),a("ul",[a("li",[n._v("重点 & 社区热议话题")]),n._v(" "),a("li",[n._v("优化打包构建速度 - 开发体验和效率")]),n._v(" "),a("li",[n._v("优化产出代码 - 产品性能")])]),n._v(" "),a("h3",{attrs:{id:"webpack-优化打包构建速度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化打包构建速度"}},[n._v("#")]),n._v(" webpack 优化打包构建速度")]),n._v(" "),a("hr"),n._v(" "),a("ul",[a("li",[n._v("优化 babel-loader")]),n._v(" "),a("li",[n._v("IgnorePlugin - 避免哪些插件")]),n._v(" "),a("li",[n._v("noParse - 不管哪些")]),n._v(" "),a("li",[n._v("happyPack - 多进程打包工具")]),n._v(" "),a("li",[n._v("ParallelUglifyPlugin - 开启多进程进行代码压缩")]),n._v(" "),a("li",[n._v("自动刷新")]),n._v(" "),a("li",[n._v("热更新（自动刷新升级版）")]),n._v(" "),a("li",[n._v("DllPlugin")])]),n._v(" "),a("h4",{attrs:{id:"优化-babel-loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化-babel-loader"}},[n._v("#")]),n._v(" 优化 babel-loader")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("{\n                test: /\\.js?$/,\n  \t\t\t\t\t\t\tloader: ['babel-loader?cacheDirectory'], // 开启缓存\n                exclude: /(node_modules)/, // 排除范围，include exclude 选一个就好\n  \t\t\t\t\t\t\tinclude: path.join(__dirname, 'src')\n            },\n")])])]),a("h4",{attrs:{id:"ignoreplugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignoreplugin"}},[n._v("#")]),n._v(" IgnorePlugin")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// prod\n// 忽略 moment 下的 /locale 目录\n        new webpack.IgnorePlugin(/\\.\\/locale/, /moment/),\n")])])]),a("h4",{attrs:{id:"noparse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#noparse"}},[n._v("#")]),n._v(" noParse")]),n._v(" "),a("h4",{attrs:{id:"happypack-多进程打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#happypack-多进程打包"}},[n._v("#")]),n._v(" happyPack 多进程打包")]),n._v(" "),a("ul",[a("li",[n._v("JS 单线程，开启多进程打包")]),n._v(" "),a("li",[n._v("提高构建速度（特别是多核CPU）")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// prod\n{\n  \ttest: /\\.js$/,\n    // 把对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例\n    use: ['happypack/loader?id=babel'],\n    \t  include: srcPath,\n        // exclude: /node_modules/\n},\n              \n  \n// happyPack 开启多进程打包\n        new HappyPack({\n            // 用唯一的标识符 id 来代表当前的 HappyPack 是用来处理一类特定的文件\n            id: 'babel',\n            // 如何处理 .js 文件，用法和 Loader 配置中一样\n            loaders: ['babel-loader?cacheDirectory']\n        }),\n")])])]),a("h4",{attrs:{id:"paralleluglifyplugin-多进程压缩js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paralleluglifyplugin-多进程压缩js"}},[n._v("#")]),n._v(" ParallelUglifyPlugin 多进程压缩JS")]),n._v(" "),a("ul",[a("li",[n._v("Webpack 内置 Uglify 工具压缩 JS")]),n._v(" "),a("li",[n._v("JS 单线程，开启多进程压缩更快")]),n._v(" "),a("li",[n._v("和 happyPack 原理一样")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 使用 ParallelUglifyPlugin 并行压缩输出的 JS 代码\n        new ParallelUglifyPlugin({\n            // 传递给 UglifyJS 的参数\n            // （还是使用 UglifyJS 压缩，只不过帮助开启了多进程）\n            uglifyJS: {\n                output: {\n                    beautify: false, // 最紧凑的输出\n                    comments: false, // 删除所有的注释\n                },\n                compress: {\n                    // 删除所有的 `console` 语句，可以兼容ie浏览器\n                    drop_console: true,\n                    // 内嵌定义了但是只用到一次的变量\n                    collapse_vars: true,\n                    // 提取出出现多次但是没有定义成变量去引用的静态值\n                    reduce_vars: true,\n                }\n            }\n")])])]),a("p",[a("strong",[n._v("关于开启多进程")])]),n._v(" "),a("ul",[a("li",[n._v("项目较大，打包较慢，开启多进程能提高速度")]),n._v(" "),a("li",[n._v("项目较小，打包很快，开启多进程会降低速度（进程开销）")]),n._v(" "),a("li",[n._v("按需使用")])]),n._v(" "),a("h4",{attrs:{id:"webpack-如何配置热更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-如何配置热更新"}},[n._v("#")]),n._v(" webpack 如何配置热更新")]),n._v(" "),a("h5",{attrs:{id:"自动刷新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动刷新"}},[n._v("#")]),n._v(" 自动刷新")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("module.exports = {\n  watch: true, // 开启监听，默认为 false\n    watchOptions: {\n        ignored: /node_modules/, // 忽略哪些\n        // 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高\n        // 默认为 300ms\n        aggregateTimeout: 300,\n        // 判断文件是否发生变化是通过不停的去询问系统指定文件有没有变化实现的\n        // 默认每隔1000毫秒询问一次\n        poll: 1000\n    }\n}\n")])])]),a("h5",{attrs:{id:"热更新"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#热更新"}},[n._v("#")]),n._v(" 热更新")]),n._v(" "),a("ul",[a("li",[n._v("自动刷新：整个网页全部刷新，速度较慢")]),n._v(" "),a("li",[n._v("自动刷新：整个网页全部刷新，状态会丢失")]),n._v(" "),a("li",[n._v("热更新：新代码生效，网页不刷新，状态不丢失")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const HotModuleReplacementPlugin = require('webpack/lib/HotModuleReplacementPlugin');\n\nmodule.exports = {\n   entry: {\n        // index: path.join(srcPath, 'index.js'),\n        index: [\n            'webpack-dev-server/client?http://localhost:8080/',\n            'webpack/hot/dev-server',\n            path.join(srcPath, 'index.js')\n        ],\n        other: path.join(srcPath, 'other.js')\n    },\n  plugins: [\n     new HotModuleReplacementPlugin()\n  ],\n  devServer: {\n    hot: true\n  }\n}\n\n// index.js  - 热更新有成本，需要我们再开发环境下去注册哪些需要更新\n// 增加，开启热更新之后的代码逻辑\nif (module.hot) {\n    module.hot.accept(['./math'], () => {\n        const sumRes = sum(10, 30)\n        console.log('sumRes in hot', sumRes)\n    })\n}\n")])])]),a("h4",{attrs:{id:"dllplugin-动态链接库插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dllplugin-动态链接库插件"}},[n._v("#")]),n._v(" DllPlugin 动态链接库插件")]),n._v(" "),a("ul",[a("li",[n._v("前端框架如vue \\ React ，体积大，构建慢")]),n._v(" "),a("li",[n._v("较稳定，不常升级版本")]),n._v(" "),a("li",[n._v("同一个版本只构建一次即可，不用每次都重新构建")])]),n._v(" "),a("p",[a("strong",[n._v("使用过程")])]),n._v(" "),a("ul",[a("li",[n._v("Webpack 已内置DllPlugin 支持")]),n._v(" "),a("li",[n._v("DllPlugin - 打包出 dll 文件")]),n._v(" "),a("li",[n._v("DllReferencePlugin - 使用 dll 文件")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// webpack.dll.js\nconst path = require('path')\nconst DllPlugin = require('webpack/lib/DllPlugin')\nconst { srcPath, distPath } = require('./paths')\n\nmodule.exports = {\n  mode: 'development',\n  // JS 执行入口文件\n  entry: {\n    // 把 React 相关模块的放到一个单独的动态链接库\n    react: ['react', 'react-dom']\n  },\n  output: {\n    // 输出的动态链接库的文件名称，[name] 代表当前动态链接库的名称，\n    // 也就是 entry 中配置的 react 和 polyfill\n    filename: '[name].dll.js',\n    // 输出的文件都放到 dist 目录下\n    path: distPath,\n    // 存放动态链接库的全局变量名称，例如对应 react 来说就是 _dll_react\n    // 之所以在前面加上 _dll_ 是为了防止全局变量冲突\n    library: '_dll_[name]',\n  },\n  plugins: [\n    // 接入 DllPlugin\n    new DllPlugin({\n      // 动态链接库的全局变量名称，需要和 output.library 中保持一致\n      // 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值\n      // 例如 react.manifest.json 中就有 \"name\": \"_dll_react\"\n      name: '_dll_[name]',\n      // 描述动态链接库的 manifest.json 文件输出时的文件名称\n      path: path.join(distPath, '[name].manifest.json'),\n    }),\n  ],\n}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n    <div id=\"root\"></div>\n\n    <script src=\"./react.dll.js\"><\/script> // 引用dll打包出来的文件\n</body>\n</html>\n// webpack.dev.js\n\n// 第一，引入 DllReferencePlugin\nconst DllReferencePlugin = require('webpack/lib/DllReferencePlugin');\n\nmodule: {\n        rules: [\n            {\n                test: /\\.js$/,\n                loader: ['babel-loader'],\n                include: srcPath,\n                exclude: /node_modules/ // 第二，不要再转换 node_modules 的代码\n            },\n        ]\n    },\n\nplugins: [\n  // 第三，告诉 Webpack 使用了哪些动态链接库\n        new DllReferencePlugin({\n            // 描述 react 动态链接库的文件内容\n            manifest: require(path.join(distPath, 'react.manifest.json')),\n        }),\n]\n")])])]),a("h2",{attrs:{id:"webpack-优化构建速度-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化构建速度-总结"}},[n._v("#")]),n._v(" webpack 优化构建速度 - 总结")]),n._v(" "),a("p",[a("strong",[n._v("（可用于生产环境）")])]),n._v(" "),a("ul",[a("li",[n._v("优化 babel - loader")]),n._v(" "),a("li",[n._v("IgnorePlugin")]),n._v(" "),a("li",[n._v("noParse")]),n._v(" "),a("li",[n._v("happyPack")]),n._v(" "),a("li",[n._v("ParallelUglifyPlugin(必须用于生产环境)")])]),n._v(" "),a("p",[a("strong",[n._v("（不用于生产环境）")])]),n._v(" "),a("ul",[a("li",[n._v("自动刷新")]),n._v(" "),a("li",[n._v("热更新")]),n._v(" "),a("li",[n._v("DllPlugin")])]),n._v(" "),a("h2",{attrs:{id:"webpack-性能优化-产出代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-性能优化-产出代码"}},[n._v("#")]),n._v(" webpack 性能优化 - 产出代码")]),n._v(" "),a("ul",[a("li",[n._v("体积更小（就会加载更快）")]),n._v(" "),a("li",[n._v("合理分包，不重复加载")]),n._v(" "),a("li",[n._v("速度更快，内存使用更少")])]),n._v(" "),a("h4",{attrs:{id:"小图片base编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小图片base编码"}},[n._v("#")]),n._v(" 小图片base编码")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 图片 - 考虑 base64 编码的情况\n            {\n                test: /\\.(png|jpg|jpeg|gif)$/,\n                use: {\n                    loader: 'url-loader',\n                    options: {\n                        // 小于 5kb 的图片用 base64 格式产出\n                        // 否则，依然延用 file-loader 的形式，产出 url 格式\n                        limit: 5 * 1024,\n\n                        // 打包到 img 目录下\n                        outputPath: '/img1/',\n\n                        // 设置图片的 cdn 地址（也可以统一在外面的 output 中设置，那将作用于所有静态资源）\n                        // publicPath: 'http://cdn.abc.com'\n                    }\n                }\n            },\n")])])]),a("h4",{attrs:{id:"bundle加hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bundle加hash"}},[n._v("#")]),n._v(" bundle加hash")]),n._v(" "),a("p",[n._v("构建中如果没变化，就会命中缓存，加载更快，避免重新加载")]),n._v(" "),a("h4",{attrs:{id:"懒加载-import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#懒加载-import"}},[n._v("#")]),n._v(" 懒加载 - import")]),n._v(" "),a("h4",{attrs:{id:"提取公共代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提取公共代码"}},[n._v("#")]),n._v(" 提取公共代码")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 分割代码块\n        splitChunks: {\n            chunks: 'all',\n            /**\n             * initial 入口chunk，对于异步导入的文件不处理\n                async 异步chunk，只对异步导入的文件处理\n                all 全部chunk\n             */\n\n            // 缓存分组\n            cacheGroups: {\n                // 第三方模块\n                vendor: {\n                    name: 'vendor', // chunk 名称\n                    priority: 1, // 权限更高，优先抽离，重要！！！\n                    test: /node_modules/,\n                    minSize: 0,  // 大小限制\n                    minChunks: 1  // 最少复用过几次\n                },\n\n                // 公共的模块\n                common: {\n                    name: 'common', // chunk 名称\n                    priority: 0, // 优先级\n                    minSize: 0,  // 公共模块的大小限制\n                    minChunks: 2  // 公共模块最少复用过几次\n                }\n            }\n        }\n")])])]),a("h4",{attrs:{id:"ignoreplugin-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignoreplugin-2"}},[n._v("#")]),n._v(" IgnorePlugin")]),n._v(" "),a("h4",{attrs:{id:"使用cdn加速"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用cdn加速"}},[n._v("#")]),n._v(" 使用CDN加速")]),n._v(" "),a("h4",{attrs:{id:"使用production"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用production"}},[n._v("#")]),n._v(" 使用production")]),n._v(" "),a("ul",[a("li",[n._v("自动开启代码压缩")]),n._v(" "),a("li",[n._v("Vue React 等会自动删掉调试代码（如开发环境的warning）")]),n._v(" "),a("li",[n._v("启动 Tree-Shaking\n"),a("ul",[a("li",[n._v("ES6 Module 才能让tree-shaking 生效")]),n._v(" "),a("li",[n._v("commonjs 就不行")])])])]),n._v(" "),a("h5",{attrs:{id:"es6-module-和-commonjs-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-module-和-commonjs-区别"}},[n._v("#")]),n._v(" ES6 Module 和 Commonjs 区别")]),n._v(" "),a("ul",[a("li",[n._v("ES6 Module 静态引入，编译时引入")]),n._v(" "),a("li",[n._v("CommonJS 动态引入，执行时引入")]),n._v(" "),a("li",[n._v("只有ES6 Module 才能静态分析，实现 Tree-Shaking")])]),n._v(" "),a("h4",{attrs:{id:"scope-hosting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scope-hosting"}},[n._v("#")]),n._v(" Scope Hosting")]),n._v(" "),a("p",[n._v("改变打包之后的作用域，内存占用更少")]),n._v(" "),a("ul",[a("li",[n._v("代码体积更小")]),n._v(" "),a("li",[n._v("创建函数作用域更少")]),n._v(" "),a("li",[n._v("代码可读性更好")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const MoudleConcatenationPlugin = require('webpack/lib/optimize/MoudleConcatenationPlugin')\n\nmodule.exports = {\n  resolve: {\n    // 针对 npm 中 的第三方模块有限采用 jsnext:main 中指向的 ES6 模块化语法的文件\n    mainFielfds: ['jsnext:main', 'browser', 'main']\n  },\n  plugins: [\n    // 开启 Scope Hosting\n    new MoudleConcatenationPlugin()\n  ]\n}\n")])])]),a("h2",{attrs:{id:"webpack-性能优化-产出代码-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-性能优化-产出代码-2"}},[n._v("#")]),n._v(" webpack 性能优化 - 产出代码")]),n._v(" "),a("ul",[a("li",[n._v("小图片 base64 编码")]),n._v(" "),a("li",[n._v("bundle 加 hash")]),n._v(" "),a("li",[n._v("懒加载")]),n._v(" "),a("li",[n._v("提取公共代码")]),n._v(" "),a("li",[n._v("使用 CDN加速")]),n._v(" "),a("li",[n._v("使用production")]),n._v(" "),a("li",[n._v("Scope Hosting")])])])}),[],!1,null,null,null);e.default=s.exports}}]);