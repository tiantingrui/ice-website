(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{445:function(t,n,a){"use strict";a.r(n);var e=a(22),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前端路由原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端路由原理"}},[t._v("#")]),t._v(" 前端路由原理")]),t._v(" "),a("ul",[a("li",[t._v("稍微复杂一点的SPA，都需要路由")]),t._v(" "),a("li",[t._v("vue-router也是vue全家桶的标配之一")]),t._v(" "),a("li",[t._v("属于 “和日常使用相关联的原理”，面试常考")])]),t._v(" "),a("h3",{attrs:{id:"vue-router的路由模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-router的路由模式"}},[t._v("#")]),t._v(" vue-router的路由模式")]),t._v(" "),a("ul",[a("li",[t._v("hash "),a("code",[t._v("#")])]),t._v(" "),a("li",[t._v("H5 history "),a("code",[t._v("/")])])]),t._v(" "),a("h2",{attrs:{id:"hash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[t._v("#")]),t._v(" hash")]),t._v(" "),a("h3",{attrs:{id:"hash-的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash-的特点"}},[t._v("#")]),t._v(" hash 的特点")]),t._v(" "),a("ul",[a("li",[t._v("hash 变化会触发网页跳转，即浏览器的前进、后退")]),t._v(" "),a("li",[t._v("hash 变化不会刷新页面，SPA 必需的特点")]),t._v(" "),a("li",[t._v("hash 永远不会提交到 server 端（前端控制）")])]),t._v(" "),a("h3",{attrs:{id:"用-js-实现-hash-路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-js-实现-hash-路由"}},[t._v("#")]),t._v(" 用 JS 实现 hash 路由")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hash Router</title>\n</head>\n<body>\n    <p>hash test</p>\n    <button id=btn1> 修改 hash </button>\n</body>\n\n<script>\n    // hash 变化，包括：\n    // a. JS 修改 URL\n    // b. 手动修改 url 的 hash\n    // c. 浏览器前进、后退\n    window.onhashchange = (event) => {\n        console.log('old url', event.oldURl)\n        console.log('new url', event.newURl)\n\n        consoel.log('hash: ', location.hash)\n    }\n\n    // 页面初次加载，获取 hash\n    document.addEventListener('DOMContentLoaded', () => {\n        console.log('hash: ', localtion.hash)\n    })\n\n    // JS 修改 URL\n    document.getElementById('btn1').addEventListener('click', () => {\n        location.href = '#/user'\n    })\n<\/script>\n</html>\n")])])]),a("h2",{attrs:{id:"h5-history"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#h5-history"}},[t._v("#")]),t._v(" H5 history")]),t._v(" "),a("ul",[a("li",[t._v("用url规范的路由，但跳转时不刷新页面")]),t._v(" "),a("li",[t._v("history.pushState")]),t._v(" "),a("li",[t._v("window.onpopstate")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>H5 history Router</title>\n</head>\n<body>\n    <p>history API test</p>\n    <button id=btn1> 修改 hash </button>\n</body>\n<script>\n    // 页面初次加载，获取hash\n    document.addEventListener('DOMContentLoaded', () => {\n        console.log('load', location.pathname)\n    })\n\n    // 打开一个新的路由\n    // 注意：用 pushState方式，浏览器不会刷新页面\n    document.getElementById('btn1').addEventListener('click', () => {\n        const state = {name : 'page1'}\n        console.log('切换路由到', 'page1')\n        history.pushState(state, '', 'page1')\n    })\n\n    // 监听浏览器前进、后退\n    window.onpopstate = (event) => {\n        console.log('onpopstate', event.state, location.pathname)\n    }\n<\/script>\n</html>\n")])])]),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[t._v("hash - window.onhashchange")]),t._v(" "),a("li",[t._v("H5 history - history.pushState 和 window.onpopstate")]),t._v(" "),a("li",[t._v("H5 history 需要后端支持")])]),t._v(" "),a("h3",{attrs:{id:"两者的选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两者的选择"}},[t._v("#")]),t._v(" 两者的选择")]),t._v(" "),a("ul",[a("li",[t._v("toB的系统推荐用，简单易用，对url 规范不敏感")]),t._v(" "),a("li",[t._v("toC 的系统，可以考虑选择 H5 history，但需要服务端支持")]),t._v(" "),a("li",[t._v("能选择简单的，就别用复杂的，要考虑成本和收益")])])])}),[],!1,null,null,null);n.default=s.exports}}]);